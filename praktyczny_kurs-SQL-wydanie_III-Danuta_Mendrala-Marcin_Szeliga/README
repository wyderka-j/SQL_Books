Praktyczny kurs SQL, Wydanie III (Danuta Mendrala, Marcin Szeliga)

https://helion.pl/ksiazki/praktyczny-kurs-sql-wydanie-iii-danuta-mendrala-marcin-szeliga,pksq3v.htm?from=ni#format/d

W tym repozytorium udostępniam moje rozwiązania zadań, które znajdują się końcu każdego rozdziału. 
Projekt został wykonany przy użyciu Microsoft SQL Server.


Zadania 

------------------------------
  Rozdział 1 
------------------------------
1. Wyodrębnij kolumny, które zgodnie z definicją 3PN, powinny być przeniesione do tabel słownikowych.
       		Płyty {ID płyty, Nazwa wykonawcy, Nazwa gatunku, Czas trwania, Opinia, Narodowość wykonawcy}

2. Jak przekształcić poniższe tabele, aby każda książka mogła mieć dowolnie wielu autorów, a każdy autor mógł napisać dowolną liczbę książek?
        	Autorzy {ID autora, Imię, Nazwisko}
       		Książki {ID książki, Tytuł, ID autora1, IDautora2, IDautora3}

3. Doprowadź poniższą tabelę kolejno do pierszej, drugiej i trzeciej postaci normalnej.
        	Uczniowie {Imię, Nazwisko, Adres, Ocena, Data wystawienia oceny, Uwagi}

------------------------------
  Rozdział 2
------------------------------
1. Zaimplementuj w jęzuku SQL poniższy, zapisany w pseudokodzie, algorytm przeszukiwania tabeli:
 	a) Odczyta wiersz tabeli Customer
 	b) Sprawdź, czy w kolumnie LasName znajduje się wartość Kumar
 	c) Jeśli tak, skopiuj wiersz do tabeli tymczasowej
 	d) Sprawdź, czy tabela zawiera dalsze wiersze:
 		- Jeżeli tak, powtórz poprzednie kroki
 		- Jeżeli nie, zwróć użytkownikowi zawartość tabeli tymczasowej

2. Czy potrafisz bez wykonywania poniższych instrukcji powiedzieć, jakie będą ich wyniki?
 		SELECT 1
 		WHERE NOT NULL = - NULL;
 
 		SELECT 1 + '1' +NULL;

3. Czy to, że SQL jest językiem interpretowanym, a serwer bazodanowy wykona każdą poprawną instrukcję przysłaną przez użytkownika, może mieć wpływ na bazpieczeństwo?
   Uzasadnij swoją odpowiedź, podając przykład.
 
------------------------------
   Rozdział 3
------------------------------
1. Odczytaj z tabeli [SalesLT].[Product] nazwy towarów (kolumna [Name]), oraz powiększone o 20% ich ceny katalogowe (oblicz je na podstawie dancyh z kolumny [ListPrice]).

2. Oblicz, ile dni upłynęło pomiędzy złożeniem  zamówienia a wysłaniem zrealizowanych zamówień (różnice między wartościami kolumn [ShpiDate] i [OrderDate] tabeli
   [SalesLT].[SalesOrderHeader]).

3. Wykorzystaj wiadomości z tego rozdziału, w tym opisane funkcje systemowe, do napisania zapytania, którego sktórony wynik został zamieszczony poniżej:
  		  	  (No column name)			(No column name)		(No column name)
  		  	  Produkt Touring-1000 Blue, 54		kosztuje			2384.10
  		  	  Produkt Touring-1000 Blue, 54		kosztuje			2384.10
  		  	  Produkt Mointain-200 Silver, 38	kosztuje			2320.00
  		  	  Produkt Mointain-200 Silver, 38	kosztuje			2320.00
  Podpowiedź: dane o produktach znajdują się w tabeli [SalesLT].[Product].

4. Odczytaj z tabeli [SalesLT].[SalesOrderHeader] ułożoną od najnowszych do najstarszych listę dat wszystkich zamówień. Wynik zapytania powinien mieć formę rok-miesiąc-dzień.
			(No colum name)
			2014-4-1
		 	2008-6-1
   W rozwiązaniu użyj funkcji YEAR(), MONTH() i DAY().

5. Odczytaj z tabeli [SalesLT].[Product] kolumny [ProductNumber] oraz [Size] i posortuj wynik rosnąco według wartości kolumny [Size], ale w taki sposób, żeby wartości NULL 
   znalazły się na końcu, a nie na początku wyniku. Podpowiedź użyj funkcji CASE.
   
------------------------------
   Rozdział 4
------------------------------
1. Odczytaj z tabeli [SalesLT].[Product] nazwy produktów, których koszt jest ponad dwukrotnie niższy od ceny, a ostatnim znakiem kodu towaru jest 4 lub 8.

2. Z tabeli [SalesLT].[SalesOrderHeader] odczytaj numery (kolumna [SalesOrderID]) i wysokości opłat (kolumna [Freight]) 5% zamówień o najniższym koszcie wysyłki złożonych
   (kolumna [OrderDate] w drugim półroczu 2008 roku.

3. Napisz zapytanie zwracające za każdym razem nazwę innego, losowo wybranego produktu.

------------------------------
   Rozdział 5
------------------------------
1. Odczytaj alfabetycznie uporzadkowaną listę nazw produktów sprzedawanych kiedykolwiek klientom o imieniu Jeffrey.

2. Odczytaj imiona i nazwiska klientów, którzy nie złożyli ani jednego zamówienia.

3. Bez używania funkcji CASE napisz zapytanie zwracające numer zamówienia (kolumna [SalesOrderID]), wysokość opłaty (kolumna [Freight]) i wyraz High lub Low, przy czym za 
   kosztowne uznaj te zamówienia, których wartość opłaty przekracza 100, a pozostałe oceń jako małe. 

------------------------------
   Rozdział 6
------------------------------
1. Odczytaj z tabeli [SalesLT].[SalesOrderHeader] wartości zamówień o najwyższych opłatach za wysyłkę zrealizowanych w każdym dniu dla poszczególnych klientów.

2. Odczytaj nazwy produktów, które zostały sprzedane więcej niż trzy razy. Dadaj do wyniku liczbę tych produktów.

3. Uruchom poniższy skrypt tworzący tabelę tymczasową i wstawiający do niej dane u numerach wybranych klientów, miesiącach złożenia przez nich zamówień i wartościach 
   poszczególnych zamówień:
				CREATE TABLE #Sprzedaz
				([ID klienta] INT NOT NULL,
				Miesiac INT NOT NULL,
				Wartosc MONEY NOT NULL);
				Go
				INSERT INTO #Sprzedaz
				SELECT [CustomerID], DATEPART(MONTH, [OrderDate]), [TotalDue]
				FROM [SalesLT].[SalesOrderHeader];
				Go

------------------------------
   Rozdział 7
------------------------------
1. Policz, ile razy sprzedany został każdy produkt, a następnie ponumeruj wiersze wyniku tego zapytania na dwa sposoby: w jednej kolumnie umieść numery od jednego (najczęściej
   sprzedawany produkt) do ostatniego na podstawie pozycji wiersza z danym produktem, w drugiej wstaw numery na podstawie liczby sprzedaży danego towaru (towary sprzedane tyle
   samo razy powinny mieć taki sam numer). Częściowy wynik pokazany został poniżej:
  					ProductNumber	SalesCount	(No column name)	(No column name)
  					LJ-0192-L	10			1			1
  					VE-C304-S	10			2			1
  					SJ-0194-X	9			3			2
  					CA-1098		9			4			2
  					SJ-0194-L	8			5			3
  					RA-H123		8			6			3

2. Policz sumę zamówień na poziomie dni, miesięcy i lat dat zapłaty za poszczególne zamówienia (wartości kolumny DueDate). Dadaj też do zapytania sumę wartości wszystkich 
   zamówień. Częściowy wynik pokazany został poniżej:
  				year	month	day	SalesPerDay	SalesPerMonth	SalesPerYear	OverallSales
  				2008	7	16	1170,5376	751225,2685	956303,5949	1157312,3799
  				2008	7	17	2361,6403	751225,2685	956303,5949	1157312,3799
  				2008	7	18	70742,0359	751225,2685	956303,5949	157312,3799
  				2008	7	18	70742,0359	751225,2685	956303,5949	1157312,3799
  				2008	8	7	101811,538	111088,344	956303,5949	1157312,3799
 				2008	8	7	101811,538	111088,344	956303,5949	1157312,3799

3. Policz różnicę wartości pomiędzy dwoma kolejnymi zamówieniami (przyjmij, że kolejność zamówień wyznaczana jest przez wartość SalesOrderID). Częściowy wynik pokazany został
   poniżej:
  					SalesOrderID	TotalDue	(No column name)
  					71774		972,785		NULL
  					71776		87,0851		-885,6999
  					71780		42452,6519	42365,5668
  					71782		43962,7901	1510,1382

------------------------------
   Rozdział 8
------------------------------
1. Odczytaj za pomocą podzapytania numery zamówień złożonych przez klienta o nazwisku Eminhizer.

2. Klauzula TOP pozwala odczytać określoną liczbę wierszy, ale zaczynając zawsze od pierszego lub ostatniego. Chociaż serwer SQL umożliwia określenie nie tylko liczby wierszy,
  lecz także pozycji pierwszego zaklasyfikowanego wiersza, to niektóre serwery nie mają takiej funkcjonalmości. Zadanie polega na odczytaniu przy użyciu niepowiązanego 
  podzapytania, ale bez klauzuli OVER, wartości pięciu zamówień posortowanych według ich wartosci i zwróceniu zamówień znajdujących się na pozycjach od 10. do 15.

3. Odczytaj numery (kolumna SalesOrderID), daty zapłaty (kolumna DueDate) i numery klientów (kolumna CustomerID) dla zamówień złożonych ostatniego roboczego dnia każdego 
   miesiąca. Podpowiedź: ponieważ ostatni roboczy dień może być inny dla poszczególnych miesięcy, użyj podzapytania niepowiązanego zwracającego ostatnią (największą datę 
   złożenia zamówienia w każdym miesiącu).

------------------------------
   Rozdział 9
------------------------------
 1. Poniższe zapytanie zwracające nazwy produktów i kategorii działa zbyt wolno. Jak można poprawić jego wydajność?
					SELECT Name
					FROM SalesLT.Product
					UNION 
					SELECT Name
					FROM SalesLT.ProductCategory

2. Wykonanie poniższego zapytania wymaga przeskanowania (odczytania w całości) indeksu założonego na kolumnie UnitPrice. Przepisz to zapytanie tak, żeby używało argumentu typu
   SARG.
					SELECT SalesOrderID
					FROM SalesLT.SalesOrderDetail
					WHERE UnitPrice*.77 > 900;


3. Znajdź optymalny indeks dla poniższego zapytania:
					SELECT DueDate, SalesOrderID, TotalDue,
					LAG(TotalDue) OVER (PARTITION BY DueDate ORDER BY DueDate) AS PreviousTotalDue
					FROM SalesLT.SalesOrderHeader
					OEDER BY DueDate;
------------------------------
   Rozdział 10
------------------------------
1. Przeceń o 25% wszystkie produkty z kategorii Forks, jednocześnie zwiększając ich koszt standardowy o dwie jednostki.

2. Utwórz tabelę Panie zawierającą identyfikatory, imiona i nazwiska wszystkich klientek firmy AdventureWorks. Przyjmij, że tylko imiona pań kończą się na literę a.

3. Wykonaj poniższe instrukcje modyfikujące dane w utworzonej w poprzednim zadaniu tabeli Panie, a następnie zsynchronizuj zawartość tej tabeli z danymi pań odczytanymi z 
   tabeli [SalesLT].[Customer]:
					DELETE FROM Panie
					WHERE [CustomerID] < 50;

					UPDATE Panie
					SET [FirstName]='X'
					WHERE [CustomerID]%2=1;

					INSERT INTO Panie ([FirstName], [LastName])
					VALUES ('Ala', 'Nowak');

------------------------------
   Rozdział 11
------------------------------
1. Twoim zadaniem jest przygotowanie raportu podsumowującego roczną sprzedaż. Wyliczając sumy i średnie wartośvi sprzedaży produktów, kilkaktrotnie musisz odczytać tabelę 
   SalesOrderDetail. Jak zagwarantujesz poprawność wyników raportu?

2. Po przerwie na lunch użytkownicy zgłaszają, żr próby dalszej pracy z bazą dancyh kończąsię chwilowym zawieszeniem proramu i wreszcie komunikatem błędu mówiącym, iż serwer
   bazodanowy jest niedostępny. Po sprawdzeniu okazuje się, że serwer i sieć działają normalnie, a baza nie została uszkodzona. Co jest najbardziej prowdopodobną przyczyną 
   problemu?

3. Wramach tworzonej procedury modyfikujesz jeden wiersz, informujący o wykonaniu wszystkich operacji, do tabeli znajdującej się w bazie donych na zdalnym serwerze. Połączenie
   między serwerami jest mocno obciążone i zdarza się, że czas nawiązywania sesji i przesyłania dancyh pomiędzy serwerami wieloktrotnie się wydłuża. Co zrobić, aby w przypadku
   zgłoszenia przez proceduję błędu braku połączenia ze zdalnym serwerem nie trzeba było ponownie wykonywać długotrwałych modyfikacji danych?

------------------------------
   Rozdział 12
------------------------------
1. Na podstawie poniższych informacji utwórz tabelę i nałóż na nią wymagane ograniczenia:
   Każda osoba musi podać imię i nazwisko oraz adres e-mail i numer telefonu. Większość osób mieszka w Katowicach. Wiek i płeć, tak jak nazwa miasta, są informacjami
   pocjonalnymi. Osoby muszą się zarejestrować, podając niepowtarzalny 5-znakowy kod promocyjny.

2. Zaimplementuj opracowany w rozdziale 1. projekt tabel, w których będzie można zapisywać informację o książkach i ich autorac, przy czym jeden aitor będzie mógł napisać wiele
   książek, a książka będzie mogła mieć kilku autorów:
 					Autorzy {IDAutora, Imię, Nazwisko}
 					Książki {IDKsiążki, Tytuł, DataWydania}
 					AutorzyKsiażki {IDAutra, IDKsiązki}

3. Kolega, któremu zlecono taką zmianę struktury bazy danych, aby możliwe było zapisywanie w niej informacji o modelach towarów, zaproponował poniższe rozwiązanie:
					ALTER TABLE Produkcja.Towary
					ADD Model VARCHAR(5) CONSTRAINT CK_TowaryModel CHECK (Model IN ('B1', 'A3', 'X54'));
   Zakładając, że nazwa modelu musi być sprawdzana i odpowiadać jednej z zatwierdzonych nazw, jak wytłumaczysz koledze, że jego pomysł nie jest najlepszy? Znajdź też właściwe
   rozwiązanie problemu.

------------------------------
  Rozdział 13
------------------------------
1. Przekształć poniższe zapytanie tak, aby mogłobyć użyte jako definicja widoku:
					SELECT C.Name, P.Name, P.ListPrice * 1.23
					FROM SalesLT.Product AS P
					JOIN SalesLT.ProductCategory AS C 
					ON P.ProductCategoryID = C.ProductCategoryID

2. Czy poniższy widok umożliwia modyfikowanie danych? Uzasadnij swoją odpowiedź.
					CREATE VIEW Zadanie2
					AS
					SELECT DISTRINCT [FirstName] + ' ' + [LastName] AS Client, [SalesOrderID], [OrderDate]
					FROM [SalesLT].[SalesOrderHeader] AS OH
					JOIN [SalesLT].[Customer] AS C
					ON C.CustomerID = OH.CustomerID;

3. Załóż unikatowy indeks na kolumnach [SalesOrderID] i [UnitPrice] talebi [SalesLT].[SalesOrderDetail].
