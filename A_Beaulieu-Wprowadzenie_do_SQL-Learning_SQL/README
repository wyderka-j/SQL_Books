README
"Wprowadzenie do SQL. Jak generować, pobierać i obsługiwać dane". Wydanie III, autor Alan Beaulieu, Seria wydawnicza: O'Reilly
https://helion.pl/ksiazki/wprowadzenie-do-sql-jak-generowac-pobierac-i-obslugiwac-dane-wydanie-iii-alan-beaulieu,wprsq3.htm#format/e

W tym repozytorium udostępniam moje rozwiązania zadań z książki. /
This repository is for working through the examples from the book Learning-SQL 3nd ed by Alan Beaulieu and O'Reilly media.

Projekt został wykonany przy użyciu MySQL. / The project was made using MySQL


Te ćwiczenia wykorzystują testową bazę danych Sakila dostarczoną przez MySQL. Zobacz poniżej instrukcje konfiguracji: /
These exercises utilize the Sakila test database provided by MySQL. See below for setup instructions:

https://dev.mysql.com/doc/sakila/en/sakila-installation.html

------------------------------
Zadania / Exercises
------------------------------

3.1. Pobierz identyfikator, imię i nazwisko wszytkich aktorów. Dane posortuj najpierw według nazwiska, a później według imienia. /
     Retrieve the actor ID, first name, and last name for all actors. Sort by last name and then by first name.

3.2. Pobierz identyfikator, imię i nazwisko wszystkich aktorów, których nazwisko to 'WILLIAMS' lub 'DAVIS'. /
     Retrieve the actor ID, first name, and last name for all actors whose last name equals 'WILLIAMS' or 'DAVIS'.

3.3. Utwórz zapytanie do tabeli rental zwracające identyfikatory wszystkich klientów, którzy wypożyczyli film 5 czerwca 2005 roku (wykorzystaj kolumnę rental.rental_date, do 
     zignorowania komponentu godziny możesz użyć funcji date()). Wyświetl tylko po jednym rekordzie dla każdego identyfikatora klienta. /
     Write a query against the rental table that returns the IDs of the customers who rented a film on July 5, 2005 (use the rental.rental_date column, and you can use the 
     date() function to ignore the time component). Include a single row for each distinct customer ID.

3.4. Uzupełnij zapytanie do wielu tabel, które spowoduje wygenerowanie pokazanych dancyh wyjściowych. Miejsca do uzupełnienia są oznaczone jako <#>. /
     Fill in the blanks (denoted by <#>) for this multitable query to achieve the following results:
   	          SELECT c.email, r.return_date
  	          FROM customer c 
     	        INNER JOIN rental as <1>
    		          ON c.customer_id = <2>
 	            WHERE CONVERT(date, r.rental_date) = '2005-06-14'
 	            ORDER BY <3> <4>;

4.1. Które wartości payment_id zostaną zwrócone po użyciu tego warunku filtrowania? / Which of the payment IDs would be returned by the following filter conditions?
     customer_id <> 5 AND (amount > 8 OR date(payment_date) = '2005-08-23')

4.2. Które wartości payment_id zostaną zwrócone po użyciu tego warunku filtrowania? / Which of the payment IDs would be returned by the following filter conditions?
     customer_id = 5 AND NOT (amount > 6 OR date(payment_date) = '2005-06-19')

4.3. Przygotuj zapytanie pobierające wszystkie rekordy tabeli payments, w których wartość kolumny amount wynosi 1.98, 7.98 lub 9.98. / 
     Construct a query that retrieves all rows from the payments table where the amount is either 1.98, 7.98, or 9.98.

4.4. Przygotuj zapytanie pobierajace wszystkie rekordy wszystkich klientów, których nazwisko zawiera literę A na drugiej pozycji i literę W na dowolnej pozycji po A. /
     Construct a query that finds all customers whose last name contains an A in the second position and a W anywhere after the A.

5.1. Uzupełnij brakujące fragmenty kodu (oznaczone za pomocą <#>) w zapytaniu, które powoduje wygenerowanie pokazanych rekordów. /
     Fill in the blanks (denoted by <#> ) for the following query to obtain the results that follow.
			     SELECT c.first_name, c.last_name, a.address, ct.city
     		     FROM customer c 
			          INNER JOIN address <1>
			          ON c.address_id = a.address_id
			          INNER JOIN city ct 
			          ON a.city_id = <2>
 		     	WHERE a.district = 'California'
               +------------+-----------+------------------------+----------------+
               | first_name | last_name | address                | city           |
               +------------+-----------+------------------------+----------------+
               | PATRICIA   | JOHNSON   | 1121 Loja Avenue       | San Bernardino |
               | BETTY      | WHITE     | 770 Bydgoszcz Avenue   | Citrus Heights |
               | ALICE      | STEWART   | 1135 Izumisano Parkway | Fontana        |
               | ROSA       | REYNOLDS  | 793 Cam Ranh Avenue    | Lancaster      |
               | RENEE      | LANE      | 533 al-Ayn Boulevard   | Compton        |
               | KRISTIN    | JOHNSTON  | 226 Brest Manor        | Sunnyvale      |
               | CASSANDRA  | WALTERS   | 920 Kumbakonam Loop    | Salinas        |
               | JACOB      | LANCE     | 1866 al-Qatif Avenue   | El Monte       |
               | RENE       | MCALISTER | 1895 Zhezqazghan Drive | Garden Grove   |
               +------------+-----------+------------------------+----------------+
               9 rows in set (0.00 sec)

5.2. Utwórz zapytanie zwracające tytuł każdego filmu, w którym wystąpili aktorzy o imieniu JOHN. / 
     Write a query that returns the title of every film in which an actor with the first name JOHN appeared.

5.3. Utwórz zapytanie zwracające wszystkie rekordy klientów mieszkających w tym samym mieście. Musisz przeprowadzić złączenie tabeli address z nią samą, a każdy rekord powinien
     zawierać dwa różne adresy.
     Construct a query that returns all addresses that are in the same city. You will need to join the address table to itself, and each row should include two different addresses.

