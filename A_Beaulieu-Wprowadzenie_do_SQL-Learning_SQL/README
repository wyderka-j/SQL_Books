README
"Wprowadzenie do SQL. Jak generować, pobierać i obsługiwać dane". Wydanie III, autor Alan Beaulieu, Seria wydawnicza: O'Reilly
https://helion.pl/ksiazki/wprowadzenie-do-sql-jak-generowac-pobierac-i-obslugiwac-dane-wydanie-iii-alan-beaulieu,wprsq3.htm#format/e

W tym repozytorium udostępniam moje rozwiązania zadań z książki. /
This repository is for working through the examples from the book Learning-SQL 3nd ed by Alan Beaulieu and O'Reilly media.

Projekt został wykonany przy użyciu MySQL. / The project was made using MySQL


Te ćwiczenia wykorzystują testową bazę danych Sakila dostarczoną przez MySQL. Zobacz poniżej instrukcje konfiguracji: /
These exercises utilize the Sakila test database provided by MySQL. See below for setup instructions:

https://dev.mysql.com/doc/sakila/en/sakila-installation.html

------------------------------
Zadania / Exercises
------------------------------

3.1. Pobierz identyfikator, imię i nazwisko wszytkich aktorów. Dane posortuj najpierw według nazwiska, a później według imienia. /
     Retrieve the actor ID, first name, and last name for all actors. Sort by last name and then by first name.

3.2. Pobierz identyfikator, imię i nazwisko wszystkich aktorów, których nazwisko to 'WILLIAMS' lub 'DAVIS'. /
     Retrieve the actor ID, first name, and last name for all actors whose last name equals 'WILLIAMS' or 'DAVIS'.

3.3. Utwórz zapytanie do tabeli rental zwracające identyfikatory wszystkich klientów, którzy wypożyczyli film 5 czerwca 2005r (wykorzystaj kolumnę rental.rental_date, 
     do zignorowania komponentu godziny możesz użyć funcji date()). Wyświetl tylko po jednym rekordzie dla każdego identyfikatora klienta. /
     Write a query against the rental table that returns the IDs of the customers who rented a film on July 5, 2005 (use the rental.rental_date column, and you can 
     use the date() function to ignore the time component). Include a single row for each distinct customer ID.

3.4. Uzupełnij zapytanie do wielu tabel, które spowoduje wygenerowanie pokazanych dancyh wyjściowych. Miejsca do uzupełnienia są oznaczone jako <#>. /
     Fill in the blanks (denoted by <#>) for this multitable query to achieve the following results:
   	          SELECT c.email, r.return_date
  	          FROM customer c 
     	        INNER JOIN rental as <1>
    		          ON c.customer_id = <2>
 	            WHERE CONVERT(date, r.rental_date) = '2005-06-14'
 	            ORDER BY <3> <4>;
4.1. Które wartości payment_id zostaną zwrócone po użyciu tego warunku filtrowania? / Which of the payment IDs would be returned by the following filter conditions?
     customer_id <> 5 AND (amount > 8 OR date(payment_date) = '2005-08-23')

4.2. Które wartości payment_id zostaną zwrócone po użyciu tego warunku filtrowania? / Which of the payment IDs would be returned by the following filter conditions?
     customer_id = 5 AND NOT (amount > 6 OR date(payment_date) = '2005-06-19')

4.3. Przygotuj zapytanie pobierające wszystkie rekordy tabeli payments, w których wartość kolumny amount wynosi 1.98, 7.98 lub 9.98. / 
     Construct a query that retrieves all rows from the payments table where the amount is either 1.98, 7.98, or 9.98.

4.4. Przygotuj zapytanie pobierajace wszystkie rekordy wszystkich klientów, których nazwisko zawiera literę A na drugiej pozycji i literę W na dowolnej pozycji po A. /
     Construct a query that finds all customers whose last name contains an A in the second position and a W anywhere after the A.

5.1. Uzupełnij brakujące fragmenty kodu (oznaczone za pomocą <#>) w zapytaniu, które powoduje wygenerowanie pokazanych rekordów. /
     Fill in the blanks (denoted by <#> ) for the following query to obtain the results that follow.
		     		SELECT c.first_name, c.last_name, a.address, ct.city
     		     		FROM customer c 
			          INNER JOIN address <1>
			          ON c.address_id = a.address_id
			          INNER JOIN city ct 
			          ON a.city_id = <2>
 		     		WHERE a.district = 'California'
               +------------+-----------+------------------------+----------------+
               | first_name | last_name | address                | city           |
               +------------+-----------+------------------------+----------------+
               | PATRICIA   | JOHNSON   | 1121 Loja Avenue       | San Bernardino |
               | BETTY      | WHITE     | 770 Bydgoszcz Avenue   | Citrus Heights |
               | ALICE      | STEWART   | 1135 Izumisano Parkway | Fontana        |
               | ROSA       | REYNOLDS  | 793 Cam Ranh Avenue    | Lancaster      |
               | RENEE      | LANE      | 533 al-Ayn Boulevard   | Compton        |
               | KRISTIN    | JOHNSTON  | 226 Brest Manor        | Sunnyvale      |
               | CASSANDRA  | WALTERS   | 920 Kumbakonam Loop    | Salinas        |
               | JACOB      | LANCE     | 1866 al-Qatif Avenue   | El Monte       |
               | RENE       | MCALISTER | 1895 Zhezqazghan Drive | Garden Grove   |
               +------------+-----------+------------------------+----------------+
               9 rows in set (0.00 sec)

5.2. Utwórz zapytanie zwracające tytuł każdego filmu, w którym wystąpili aktorzy o imieniu JOHN. / 
     Write a query that returns the title of every film in which an actor with the first name JOHN appeared.

5.3. Utwórz zapytanie zwracające wszystkie rekordy klientów mieszkających w tym samym mieście. Musisz przeprowadzić złączenie tabeli address z nią samą, a każdy rekord powinien
     zawierać dwa różne adresy. /
     Construct a query that returns all addresses that are in the same city. You will need to join the address table to itself, and each row should include 2 different addresses

6.1. Jeżeli mamy zbiory A={L M N O P} i B={P Q R S T}, to jakie zbiory zostaną wygenerowane przez przedstawione tutaj opcje? /
     If set A = {L M N O P} and set B = {P Q R S T}, what sets are generated by the follow‐ ing operations?
		A union B
		A union all B
		A intersect B
		A except B

6.2. Utwórz zapytanie złożone wyszukujące imiona i nazwiska wszystkich aktorów i klientów, których nazwiska rozpoczynają sie na literę L. /
     Write a compound query that finds the first and last names of all actors and customers whose last name starts with L.

6.3. Wyniki wygenerowane przez zapytanie w ćwiczeniu 6.2 posortuj według kolumny last_name. / Sort the results from Exercise 6-2 by the last_name column.

7.1. Utwórz zapytanie zwracające znaki od 19. do 25. ciągu tekstowego 'Proszę wyodrębnić podciąg tekstowy z danego ciągu tekstowego'. /
     Write a query that returns the 17th through 25th characters of the string 'Proszę wyodrębnić podciąg tekstowy z danego ciągu tekstowego'.

7.2. Utwórz zapytanie zwracające wartość bezwzględną ze znakiem (-1,0,1) dla liczby -25,7823. Wygenerowane dane powinny zawierać również liczbę zaokrągloną do najbliższych 
     setnych części. /
     Write a query that returns the absolute value and sign (−1, 0, or 1) of −25.76823 . Also return the number rounded to the nearest hundredth.

7.3. Utwórz zapytanie zwracające bieżący miesiąc. / Write a query to return just the month portion of the current date.

8.1. Utwórz zapytanie zliczające rekordy w tabeli payment. /  Construct a query that counts the number of rows in the payment table.

8.2. Zmodyfikuj zapytanie z ćwiczenia 8.1 w taki sposób, aby zliczało liczbę płatności dokonanych przez poszczególnych klientów. Dane wyjściowe powinny zawierać identyfikator 
     klienta i całkowitą kwotę jego płatności. /
     Modify your query from Exercise 8-1 to count the number of payments made by each customer. Show the customer ID and the total amount paid for each customer.

8.3. Zmodyfikuj zapytanie z ćwiczenia 8.2 w taki sposób, aby uwzględniono jedynie tych klientów, którzy dokonali przynajmniej 40 płatności. /
     Modify your query from Exercise 8-2 to include only those customers who have made at least 40 payments.

9.1. Utwórz zapytanie do tabeli film wykorzystujące warunek filtrowania z niepowiązanym podzapytaniem do tabeli category w celu znalezienia wszystkich filmów akcji: /
     Construct a query against the film table that uses a filter condition with a noncorrelated subquery against the category table to find all action films:
      (category.name = 'Action')

9.2. Zapytanie z ćwiczenia 9.1 zmodyfikuj w taki sposób, aby używało powiązanego podzapytania do tabel category i film_category w celu wygenerowania tych samych danych. /
     Rework the query from Exercise 9-1 using a correlated subquery against the category and film_category tables to achieve the same results.

9.3. Przeprowadź złączenie następującego zapytania z podzapytaniem do tabeli film_actor w celu wyświetlenia informacji o poziomie poszczególnych aktorów.
     Podzapytanie do tabeli film_actor powinno zliczać rekordy dla każdego aktora za pomocą GROPU BY actor_id, a następnie ta wartość powinna zostać porównana z kolumnami 
      min_roles i max_roles w celu ustalenia poziomu danego aktora. /
     Join the following query to a subquery against the film_actor table to show the level of each actor:
     A subquery to the film_actor table should count the records for each actor using GROUP BY actor_id, and then this value should be compared to the min_roles and max_roles
     columns to determine the actor's level.
			SELECT 'Hollywood Star' level, 30 min_roles, 99999 max_roles
			UNION ALL
			SELECT 'Prolific Actor' level, 20 min_roles, 29 max_roles
			UNION ALL
			SELECT 'Newcomer' level, 1 min_roles, 19 max_roles

10.1. Używając przedstawionych tutaj definicji tabel i ich danych, utwórz zapytanie zwracające rekordy wszystkich klientów wraz z sumą dokonanych przez nich płatności. /
      Using the table definitions and their data presented here, write a query that returns each customer name along with their total payments:
	customer1							payment1
	+-------------+-------------+					+------------+-------------+--------+
	| customer_id | name        |					| payment_id | customer_id | amount |
	+-------------+-------------+					+------------+-------------+--------+
	|           1 | John Smith  |					|        101 |           1 |   8.99 |
	|           2 | Kathy Jones |					|        102 |           3 |   4.99 |
	|           3 | Greg Oliver |					|        103 |           1 |   7.99 |
	+-------------+-------------+					+------------+-------------+--------+

10.2. Zmodyfikuj zapytanie w ćwiczeniu 10.1 w taki sposób, aby używało złączenia zewnętrznego. / Modify the query in Exercise 10.1 to use an outer join.

10.3. Opracuj zapytanie pozwalające wygenerować zbiór {1,2,3, ..., 99, 100}. (Podowiedź użyj złączenia krzyżowego z co najmniej dwoma podzapytaniami kluazuli FROM). /
      Develop a query to generate the set {1,2,3, ..., 99, 100}. (Prompt use a cross join with at least two subqueries of the FROM clause.)

11.1. Zmodyfikuj zapytanie wykorzystujące wyrażenie CASE, aby ten sam wynik został wygenerowany po użyciu wyszukiwanego wyrażenia CASE. Postaraj sie użyć jak najmiej 
	klauzul WHEN./ Modify the query that uses the CASE expression so that the same result is generated when using the CASE search expression. Try to use as few 
	WHEN clauses as possible.
 				SELECT name,
 				  CASE name
 			 	    WHEN 'English' THEN 'latin1'
 				    WHEN 'Italian' THEN 'latin1'
 				    WHEN 'French' THEN 'latin1'
 				    WHEN 'German' THEN 'latin1'
 				    WHEN 'Japanese' THEN 'utf8'
 				    WHEN 'Mandarin' THEN 'utf8'
 				    ELSE 'Unknown'
 				  END character_set
 				FROM language;

11.2. Zmodyfikuj zapytanie w taki sposób, aby zbiór wynikowy składał się z jednego rekordu z pięcioma kolumnami (po jednej dla każdej ceny). Kolumnom nadaj nazwy 
	G, PG, PG_13, R i NC_17. / Modify the query so that the result set consists of one record with five columns (one for each price). 
				SELECT rating, count(*)
				FROM film
				GROUP BY rating;
				+--------+----------+
				| rating | count(*) |
				+--------+----------+
				| G      |      178 |
				| PG     |      194 |
				| PG-13  |      223 |
				| R      |      195 |
				| NC-17  |      210 |
				+--------+----------+
